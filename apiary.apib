FORMAT: 1A
HOST: http://ethlend.herokuapps.com/

# EthLend

API description for EthLend project.

## Basic Info [/api/v1/info]

### Get Basic Info [GET /api/v1/info]

Returns basic info that can be used to inform service clients.

+ Response 201 (application/json)

    + Body
    
            {
                "eth_is_enabled": true,
                "eth_node": "http://ethnode.chain.cloud:8545",
                
                // Creator account address
                "eth_main_account": "0xb9af8aa42c97f5a1f73c6e1a683c4bf6353b83e7",
                "eth_main_account_link": "https://kovan.etherscan.io/address/0xb9af8aa42c97f5a1f73c6e1a683c4bf6353b83e7",
                
                // Ledger contract address 
                "eth_main_address": "0x0605bf0970025A6DD604f5fE481Cc307E9d5450e",
                "eth_main_address_link": "https://kovan.etherscan.io/address/0x0605bf0970025A6DD604f5fE481Cc307E9d5450e",
                "eth_balance_wei": "123112"
            }
            
## Users [/api/v1/users]

### Create new user [POST /api/v1/users]
+ Request (application/json)

        {
            "email": "sample@email.com",
            "pass": "123456"
        }
        
+ Response 200 (application/json)
    + Body
    
                {
                    shortId: '123456'
                }

### Get user data [GET /api/v1/auth/users/{shortId}]

+ Request

    + Headers
    
            Authorization: Bearer TOKEN-HERE
        
+ Response 200 (application/json)
    + Body
    
                {
                    email: 'tony@chain.cloud',
                    
                    // must be set by user (this is his external Wallet address)
                    ethAddress: '0x7aab2fcf1bb32bd5ffaf6b5b5bd99acb8f9451dd',
                    
                    // to increase balance please send Fee money here
                    balanceFeeAddress: '0xbd997cd2513c5f031b889d968de071eeafe07130',
                    
                    // this is how much does 1 Lending Request creation costs
                    balanceFeeAmountInWei: 12000
                }

### Update user data [PUT /api/v1/auth/users/{shortId}]

+ Request

    + Headers
    
            Authorization: Bearer TOKEN-HERE
        
    + Body
    
            {
                ethAddress: '0x7aab2fcf1bb32bd5ffaf6b5b5bd99acb8f9451dd'
            }

+ Response 200 (application/json)

### Validate user [POST /api/v1/users/{shortId}/validation{?sig}]

+ Parameters
    + shortId - User ID
    
    + sig (String) - Signature that is received in e-mail
    
+ Response 200
            


### Reset password [POST /api/v1/users/{email}/reset_password_request]
Will send an e-mail with 'reset your password' link.

+ Response 200

### Set new password [PUT /api/v1/users/{shortId}/password{?sig}{?new_val}]
Create new password (after reset was requested)

+ Parameters
    + shortId - User ID
    
    + sig (String) - Signature that is received in e-mail
    
    + new_val (String) - New password 
    
+ Response 200
    

### Login [POST /api/v1/users/:email/login]

+ Request (application/json)

        {
            "email": "sample@email.com",
            "pass": "123456"
        }
        
+ Response 200 (application/json)
    + Body
    
                {
                    // JWT token that should be then passed with 'Authorization: Bearer' header
                    token: '23fjadlfja8r0938241kdafjldfja840923842', 
                    
                    shortId: '123456'
                }

## Lending Requests [/api/v1/auth/lrs]

### Get a list of Lending Requests for user [GET /api/v1/auth/lrs]

Get a list of LRs for all users. Returns a JSON list of IDs. 

+ Request

    + Headers
    
            Authorization: Bearer TOKEN-HERE
            
+ Response 200 (application/json)
    
        {
            ids: 
            [
                1234342344,
                7879878789,
                2423423423
            ]
        }

### Create new Lending Request [POST /api/v1/auth/lrs]

LR will be in 'waiting for data' state. 
WARNING: Does not return any ID...
            
+ Request (application/json)
    
    + Body
    
            {
            }    

    + Headers
    
            Authorization: Bearer TOKEN-HERE
            
+ Response 200 (application/json)
    
        {
        }

### Set data to the Lending Request [PUT /api/v1/auth/lrs/{id}]

If LR is in 'waiting for data' state -> borrower should set basic data
This method should be only available to Borrower.

+ Parameters
    + id - Lending Request ID

+ Request (application/json)
    
    + Body
    
            {
                // current object ID
                id: '12312312311',
                
                eth_count: 120,
                token_amount: 10000,
                token_name: 'Augur tokens',
                token_smartcontract: '0xb533aae346245e2e05b23f420C140bCA2529b8a6',
                token_infolink: 'www.augur.com',
                borrower_account_address: '0xbd997cd2513c5f031b889d968de071eeafe07130',
                borrower_id: 1234566,   // creator shortId
                days_to_lend: 30,
            }    

    + Headers
    
            Authorization: Bearer TOKEN-HERE
            
+ Response 200 (application/json)


### Get a Lending Request [GET /api/v1/auth/lrs/{id}]

+ Request

    + Headers
    
            Authorization: Bearer TOKEN-HERE
            
+ Parameters
    + id - Lending Request ID
    
+ Response 200 (application/json)
    
        {
            // current object ID
            id: '12312312311',
                
            // 0 - waiting for data
            // 1 - waiting for tokens
            // 2 - cancelled
            // 3 - waiting for lender
            // 4 - waiting for loan
            // 5 - funded
            // 6 - waiting for payback
            // 7 - default
            // 8 - payback received
            // 9 - finished
            current_state: 1,
            
            eth_count: 120,
            token_amount: 10000,
            token_name: 'Augur tokens',
            token_smartcontract: '0xb533aae346245e2e05b23f420C140bCA2529b8a6',
            token_infolink: 'www.augur.com',
            borrower_account_address: '0xbd997cd2513c5f031b889d968de071eeafe07130',
            lender_account_address: '0x6cc2d616e56e155d8a06e65542fdb9bd2d7f3c2e',
            
            borrower_id: 1234566,   // shortId
            lender_id: 98232323,    // shortId
            
            date_created: 'TODO',
            date_modified: 'TODO',
            
            days_to_lend: 30,
            days_left: 0,
            
            // if in state 4 - waiting for loan
            "address_to_send": "0xb533aae346245e2e05b23f420C140bCA2529b8a6",
            "eth_count": 120,
            "minutes_left": 1440    // lender should send us eth_count ETHs until time is left
        }
        
### Lend [POST /api/v1/auth/lrs/{id}/lend]

Lender can select any Lending Request and lend it.
This should be called by any user, except the Borrower.
LR should move from 'waiting for lender' to 'waiting for loan' state.

+ Parameters
    + id - Lending Request ID

+ Request (application/json) 
    + Body
    
            {
            }
    
    + Headers
    
            Authorization: Bearer TOKEN-HERE
            
+ Response 200 (application/json)

        {
            // current object ID
            id: '12312312311',
                
            "address_to_send": "0xbd997cd2513c5f031b889d968de071eeafe07130",
            "eth_count": 120,
            "minutes_left": 1440    // 1 day left until this LR moves back to 'waiting for lender' state
        }